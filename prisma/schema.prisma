generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  password      String?
  verified      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?

  // Career Information
  currentRole       String?
  experienceLevel   ExperienceLevel @default(JUNIOR)
  industry          String?
  yearsOfExperience Int?
  currentSkills     String[]
  targetSkills      String[]
  bio               String?

  // Goals & Achievement Tracking
  currentGoals      String[]
  achievementScore  Int             @default(0)
  goals             Goal[]

  // Relations
  accounts      Account[]
  passwordReset PasswordReset[]
  posts         Post[]
  sessions      Session[]
  likes         Like[]
  replies       Reply[]
  stories       Story[]

  @@map("users")
}

enum ExperienceLevel {
  INTERN
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  MANAGER
  DIRECTOR
  VP
  C_LEVEL
}

model Goal {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  period      GoalPeriod
  startDate   DateTime   @default(now())
  deadline    DateTime
  status      GoalStatus @default(ACTIVE)
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId, status])
  @@index([userId, period])
  @@map("goals")
}

enum GoalPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum GoalStatus {
  ACTIVE
  COMPLETED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String
  status    PostStatus @default(DRAFT)
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]
  replies   Reply[]

  @@map("posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("replies")
}

model Story {
  id        String   @id @default(cuid())
  userId    String
  period    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period])
  @@map("stories")
}
